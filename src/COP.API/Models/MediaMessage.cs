/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace COP.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MediaMessage : IEquatable<MediaMessage>
    { 
        /// <summary>
        /// Link to media
        /// </summary>
        /// <value>Link to media</value>
        [DataMember(Name="mediaLink")]
        public string MediaLink { get; set; }

        /// <summary>
        /// Type of media picture/video
        /// </summary>
        /// <value>Type of media picture/video</value>
        [DataMember(Name="mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IOSwaggerModelsMediaMessage {\n");
            sb.Append("  MediaLink: ").Append(MediaLink).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MediaMessage)obj);
        }

        /// <summary>
        /// Returns true if IOSwaggerModelsMediaMessage instances are equal
        /// </summary>
        /// <param name="other">Instance of IOSwaggerModelsMediaMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaMessage other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MediaLink == other.MediaLink ||
                    MediaLink != null &&
                    MediaLink.Equals(other.MediaLink)
                ) && 
                (
                    MediaType == other.MediaType ||
                    MediaType != null &&
                    MediaType.Equals(other.MediaType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MediaLink != null)
                    hashCode = hashCode * 59 + MediaLink.GetHashCode();
                    if (MediaType != null)
                    hashCode = hashCode * 59 + MediaType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MediaMessage left, MediaMessage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MediaMessage left, MediaMessage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
