/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace COP.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NoiseCaptureMeta : IEquatable<NoiseCaptureMeta>
    { 
        /// <summary>
        /// Person id
        /// </summary>
        /// <value>Person id</value>
        [DataMember(Name="numberOfUsers")]
        public int? NumberOfUsers { get; set; }

        /// <summary>
        /// Thing ID
        /// </summary>
        /// <value>Thing ID</value>
        [DataMember(Name="numberOfTracks")]
        public int? NumberOfTracks { get; set; }

        /// <summary>
        /// Gets or Sets LastLeqMean
        /// </summary>
        [DataMember(Name="lastLeqMean")]
        public string LastLeqMean { get; set; }

        /// <summary>
        /// Gets or Sets LastPleasentness
        /// </summary>
        [DataMember(Name="lastPleasentness")]
        public string LastPleasentness { get; set; }

        /// <summary>
        /// time of wearable connection (e.g. &#39;2016-06-17T15:28:34Z&#39; (RFC 3339, ISO 8601))
        /// </summary>
        /// <value>time of wearable connection (e.g. &#39;2016-06-17T15:28:34Z&#39; (RFC 3339, ISO 8601))</value>
        [DataMember(Name = "timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NoiseCaptureMeta {\n");
            sb.Append("  NumberOfUsers: ").Append(NumberOfUsers).Append("\n");
            sb.Append("  NumberOfTracks: ").Append(NumberOfTracks).Append("\n");
            sb.Append("  LastLeqMean: ").Append(LastLeqMean).Append("\n");
            sb.Append("  LastPleasentness: ").Append(LastPleasentness).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NoiseCaptureMeta)obj);
        }

        /// <summary>
        /// Returns true if NoiseCaptureMeta instances are equal
        /// </summary>
        /// <param name="other">Instance of NoiseCaptureMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NoiseCaptureMeta other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NumberOfUsers == other.NumberOfUsers ||
                    NumberOfUsers != null &&
                    NumberOfUsers.Equals(other.NumberOfUsers)
                ) && 
                (
                    NumberOfTracks == other.NumberOfTracks ||
                    NumberOfTracks != null &&
                    NumberOfTracks.Equals(other.NumberOfTracks)
                ) && 
                (
                    LastLeqMean == other.LastLeqMean ||
                    LastLeqMean != null &&
                    LastLeqMean.Equals(other.LastLeqMean)
                ) &&
                (
                    LastPleasentness == other.LastPleasentness ||
                    LastPleasentness != null &&
                    LastPleasentness.Equals(other.LastPleasentness)
                ) &&
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NumberOfUsers != null)
                    hashCode = hashCode * 59 + NumberOfUsers.GetHashCode();
                    if (NumberOfTracks != null)
                    hashCode = hashCode * 59 + NumberOfTracks.GetHashCode();
                    if (LastLeqMean != null)
                    hashCode = hashCode * 59 + LastLeqMean.GetHashCode();
                    if (LastPleasentness != null)
                    hashCode = hashCode * 59 + LastPleasentness.GetHashCode();
                if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NoiseCaptureMeta left, NoiseCaptureMeta right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NoiseCaptureMeta left, NoiseCaptureMeta right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
