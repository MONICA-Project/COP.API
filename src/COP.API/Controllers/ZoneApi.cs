/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using COP.API.Attributes;
using COP.API.Models;

namespace COP.API.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class ZoneApiController : Controller
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>add a new zone</remarks>
        /// <param name="zoneName">Zone</param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPost]
        [Route("/zone")]
        [ValidateModelState]
        [SwaggerOperation("ZonePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralPostResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ZonePost([FromBody]Zone zoneName, [FromHeader, Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newZoneID = 0;
            string errorMessage = "";
            try
            {
                DatabaseInterface.DBZone dBZone = new DatabaseInterface.DBZone();
                string boundPolygon = "[";
                string comma = "";
                foreach (List<decimal?> x in zoneName.BoundingPolygon)
                {
                    boundPolygon += comma + "[" + x[0].ToString().ToString().Replace(",", ".") + "," + x[1].ToString().Replace(",", ".") + "]";
                    boundPolygon += "]";
                    comma = ",";
                }
                if (!dBZone.AddZone(zoneName.Name, zoneName.Type, zoneName.Description, zoneName.Metadata, boundPolygon, zoneName.Capacity,ref errorMessage, ref newZoneID))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));


            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"newid\" : " + newZoneID.ToString() + "\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralPostResponse>(exampleJson)
            : default(GeneralPostResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>delete zone by id</remarks>
        /// <param name="zoneId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpDelete]
        [Route("/zone/{zoneId}")]
        [ValidateModelState]
        [SwaggerOperation("ZoneZoneIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ZoneZoneIdDelete([FromRoute][Required]string zoneId, [FromHeader, Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newZoneID = 0;
            string errorMessage = "";
            try
            {
                DatabaseInterface.DBZone dBZone = new DatabaseInterface.DBZone();
                if (!dBZone.DeleteZone(zoneId, ref errorMessage))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"description\" : \" Zone " + zoneId.ToString() + "deleted \"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralResponse>(exampleJson)
            : default(GeneralResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>get zone by id</remarks>
        /// <param name="zoneId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/zone/{zoneId}")]
        [ValidateModelState]
        [SwaggerOperation("ZoneZoneIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Zone), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ZoneZoneIdGet([FromRoute][Required]string zoneId, [FromHeader, Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newZoneID = 0;
            string errorMessage = "";
            Zone result = null;
            try
            {
                DatabaseInterface.DBZone dBZone = new DatabaseInterface.DBZone();
                if (!dBZone.FindZoneFromId(zoneId, ref errorMessage, ref result))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            string exampleJson = null;

            return new ObjectResult(result);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>list all zones</remarks>
        /// <param name="zoneType"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/zones")]
        [ValidateModelState]
        [SwaggerOperation("ZonesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetZoneListResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ZonesGet([FromQuery]string zoneType, [FromHeader, Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            bool publicAccess = true;
            string pubToken = "8f7d9dd9-6bbc-460c-a76c-4be72a9ea39e";
            if (Authorization != settings.testToken && Authorization != pubToken)
                return BadRequest("Not allowed");
            else
            {
                if (Authorization == settings.testToken)
                    publicAccess = false;
            }
            long newZoneID = 0;
            string errorMessage = "";
            List<Zone> results = new List<Zone>();
            try
            {
                DatabaseInterface.DBZone dBZone = new DatabaseInterface.DBZone();
                if (zoneType != null)
                {
                    if (publicAccess)
                    {
                        if (!dBZone.ListPublicZones(zoneType, publicAccess, ref errorMessage, ref results))
                            return BadRequest("Internal Server Error:" + errorMessage);
                    }
                    else
                    {

                        if (!dBZone.ListZones(zoneType, publicAccess, ref errorMessage, ref results))
                            return BadRequest("Internal Server Error:" + errorMessage);
                    }
             
                }
                else
                {

                    if (publicAccess)
                    {
                        if (!dBZone.ListAllPublicZones( publicAccess, ref errorMessage, ref results))
                            return BadRequest("Internal Server Error:" + errorMessage);
                    }
                    else
                    {

                        if (!dBZone.ListAllZones( publicAccess, ref errorMessage, ref results))
                            return BadRequest("Internal Server Error:" + errorMessage);
                    }
                    //if (!dBZone.ListAllZones(publicAccess, ref errorMessage, ref results))
                    //    return BadRequest("Internal Server Error:" + errorMessage);
                }
            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            string exampleJson = null;
      
            return new ObjectResult(results);
        }
    }
}
