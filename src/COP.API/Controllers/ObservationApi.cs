/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using COP.API.Attributes;
using COP.API.Models;
using Microsoft.AspNetCore.SignalR;

namespace COP.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ObservationApiController : Controller
    {

        private readonly IHubContext<EventHubs.COPUpdate> _hubContext;

        public ObservationApiController(IHubContext<EventHubs.COPUpdate> hubContext)
        {
            _hubContext = hubContext;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>add a new Observation</remarks>
        /// <param name="thingid">thing observation</param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPost]
        [Route("/observation")]
        [ValidateModelState]
        [SwaggerOperation("ObservationPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ObservationPost([FromBody]Observation thingid, [FromHeader] string Authorization)
        {
            
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            long newWearableID = 0;
            string errorMessage = "";
            try
            {
                DatabaseInterface.DBObservation dBObservation = new DatabaseInterface.DBObservation();
                if (!dBObservation.AddUpdateObservation(thingid.ThingId, thingid.DatastreamId, thingid.PhenomenTime, thingid.ObservationResult, thingid.Personid, thingid.Zoneid, ref errorMessage, ref newWearableID))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));


            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"newid\" : " + newWearableID.ToString() + "\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralPostResponse>(exampleJson)
            : default(GeneralPostResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>list all observations</remarks>
        /// <param name="thingId"></param>
        /// <param name="datastreamID"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/observations")]
        [ValidateModelState]
        [SwaggerOperation("ObservationsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetObservationListResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ObservationsGet([FromQuery]int? thingId, [FromQuery]bool? datastreamID, [FromHeader] string Authorization)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetObservationListResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "\"\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetObservationListResponse>(exampleJson)
            : default(GetObservationListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>delete observation by id</remarks>
        /// <param name="thingId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpDelete]
        [Route("/observations/{thingId}")]
        [ValidateModelState]
        [SwaggerOperation("ObservationsThingIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ObservationsThingIdDelete([FromRoute][Required]string thingId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"description\" : \"description\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralResponse>(exampleJson)
            : default(GeneralResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>get observation by id</remarks>
        /// <param name="thingId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/observations/{thingId}")]
        [ValidateModelState]
        [SwaggerOperation("ObservationsThingIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Observation), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ObservationsThingIdGet([FromRoute][Required]string thingId, [FromHeader] string Authorization)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Observation));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"datastreamId\" : \"datastreamId\",\n  \"observationResult\" : \"observationResult\",\n  \"phenomenTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"thingId\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Observation>(exampleJson)
            : default(Observation);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
