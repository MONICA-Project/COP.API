/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using COP.API.Attributes;
using COP.API.Models;

namespace COP.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ZonePeopleHeatMapApiController : Controller
    {
        private readonly IHostingEnvironment _environment;

        public ZonePeopleHeatMapApiController(IHostingEnvironment environment)
        {
            _environment = environment;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get People Heat Map Info for a zone</remarks>
        /// <param name="zoneId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("//ZonePeopleHeatMapImageInfo/{zoneId}")]
        [ValidateModelState]
        [SwaggerOperation("ZonePeopleHeatMapImageInfoZoneIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(HeatMapImage), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ZonePeopleHeatMapImageInfoZoneIdGet([FromRoute][Required]int? zoneId)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            string errorMessage = "";
            string fileN = System.Guid.NewGuid().ToString() + ".png";
            string fileName = Path.Combine(_environment.WebRootPath, fileN);
            string exampleJson = null;
            HeatMapImage results = null;
            try
            {
                HeatMapManagement.CreateHeatMapResult hmr = new HeatMapManagement.CreateHeatMapResult();

                //if (!hmr.GetHeatMapInfo(fileName, ref results, ref errorMessage))
                //    return BadRequest("Internal Server Error:" + errorMessage);
                //results.Url = "https://portal.monica-cloud.eu/cop/api/" + fileN;
                results.LatStart = (decimal)55.674531;
                results.LatEnd = (decimal)55.673326;
                results.LonStart = (decimal)12.564993;
                results.LonStart = (decimal)12.568821;


                results.Url = "https://portal.monica-cloud.eu/cop/crowd_heatmap/";
            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }


            return new ObjectResult(results);

        }
    }
}
