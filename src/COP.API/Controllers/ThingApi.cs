/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using COP.API.Attributes;
using COP.API.Models;
using System.IO;

namespace COP.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ThingApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>add a new thing</remarks>
        /// <param name="name">name of thing</param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPost]
        [Route("/thing")]
        [ValidateModelState]
        [SwaggerOperation("ThingPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ThingPost([FromBody]Thing name, [FromHeader][Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newThingID = 0;
            string errorMessage = "";
            try
            {
                DatabaseInterface.DBThing dBThing = new DatabaseInterface.DBThing();
             
                if (!dBThing.AddThing(name.Name, name.ThingTemplate,name.Description, name.Status, name.Lat,name.Lon, ref errorMessage, ref newThingID))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));


            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"newid\" : " + newThingID.ToString() + "\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralPostResponse>(exampleJson)
            : default(GeneralPostResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>list all things</remarks>
        /// <param name="thingType"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/things")]
        [ValidateModelState]
        [SwaggerOperation("ThingsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetThingListResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ThingsGet([FromQuery][Required]string thingType,[FromHeader] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newZoneID = 0;
            string errorMessage = "";
            List<Thing> results = new List<Thing>();
            try
            {
                DatabaseInterface.DBThing dBThing = new DatabaseInterface.DBThing();
                if (!dBThing.ListThings(thingType, ref errorMessage, ref results))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            string exampleJson = null;

            return new ObjectResult(results);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>delete thing by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpDelete]
        [Route("/things/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ThingsIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ThingsIdDelete([FromRoute][Required]string id, [FromHeader] string Authorization)
        {
                if (!ModelState.IsValid)
                {
                    var error = ModelState.SelectMany(x => x.Value.Errors).First();
                    if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                    {
                        return BadRequest(error.ErrorMessage);
                    }
                    else if (error.Exception?.Message != null)
                    {
                        return BadRequest("Faulty input");
                    }
                    else
                        return BadRequest(ModelState);

                }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newZoneID = 0;
                string errorMessage = "";
                try
                {
                    DatabaseInterface.DBThing dBThing = new DatabaseInterface.DBThing();
                    if (!dBThing.DeleteThing(id, ref errorMessage))
                        return BadRequest("Internal Server Error:" + errorMessage);

                }
                catch (Exception e)
                {
                    return BadRequest("Internal Server Error:" + e.Message);
                }

                string exampleJson = null;
                exampleJson = "{\n  \"success\" : true,\n  \"description\" : \" Thing " + id.ToString() + "deleted \"\n}";

                var example = exampleJson != null
                ? JsonConvert.DeserializeObject<GeneralResponse>(exampleJson)
                : default(GeneralResponse);
                //TODO: Change the data returned
                return new ObjectResult(example);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>get thing by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/things/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ThingsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Thing), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ThingsIdGet([FromRoute][Required]string id,  [FromHeader] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newZoneID = 0;
            string errorMessage = "";
            Thing result = null;
            try
            {
                DatabaseInterface.DBThing dBThing = new DatabaseInterface.DBThing();
                if (!dBThing.FindThingFromId(id, ref errorMessage, ref result))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            string exampleJson = null;

            return new ObjectResult(result);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>update Thing</remarks>
        /// <param name="id"></param>
        /// <param name="updates"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPut]
        [Route("/things/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ThingsIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ThingsIdPut([FromRoute][Required]string id, [FromBody]Thing updates,[FromHeader] string Authorization)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"description\" : \"description\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralResponse>(exampleJson)
            : default(GeneralResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>list all  with last observation</remarks>
        /// <param name="thingType"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/thingsWithObservation")]
        [ValidateModelState]
        [SwaggerOperation("ThingsWithObservationGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetThingsWithObservationListResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ThingsWithObservationGet([FromQuery]string thingType, [FromQuery]int? noOfObservations, [FromHeader][Required] string Authorization)
        {

            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newZoneID = 0;
            string errorMessage = "";
            List<ThingsWithObservation> results = new List<ThingsWithObservation>();
            try
            {
                DatabaseInterface.DBThing dBThing = new DatabaseInterface.DBThing();
                if (!dBThing.ListThingsWithObs(thingType, noOfObservations, ref errorMessage, ref results))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            string exampleJson = null;

            return new ObjectResult(results);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>get thing by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/thingsWithObservation/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ThingsWithObservationIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ThingsWithObservation), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ThingsWithObservationIdGet([FromRoute][Required]string id, [FromQuery]int? noOfObservations, [FromHeader][Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newZoneID = 0;
            string errorMessage = "";
            ThingsWithObservation result = null;
            try
            {
                DatabaseInterface.DBThing dBThing = new DatabaseInterface.DBThing();
                if (!dBThing.FindThingFromIdWithObs(id, noOfObservations, ref errorMessage, ref result))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            string exampleJson = null;

            return new ObjectResult(result);
        }

        /// <summary>
        /// Exports a CSV file with data for a thing
        /// </summary>
        /// <remarks>get thing by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPost]
        [Route("/ExportCsvFile")]
        [ValidateModelState]
        [SwaggerOperation("ExportCsvFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExportCsvResult), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ExportCsvFile([FromBody] ExportCsv exportSettings, [FromHeader][Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            string errorMessage = "";
            string dataStreamInfo="";
            try
            {
                ExportCsvResult res = new ExportCsvResult();
                string filename = System.Guid.NewGuid().ToString() + ".csv";
                string filenameWithPath = "." + Path.DirectorySeparatorChar + "wwwroot" + Path.DirectorySeparatorChar +filename;


                DatabaseInterface.DBObservation dBo = new DatabaseInterface.DBObservation();
                if (!dBo.FindDataStreamId(int.Parse(exportSettings.ThingId), exportSettings.ObservationType, ref errorMessage, ref dataStreamInfo))
                    return BadRequest("Internal Server Error:" + errorMessage);
                // PArse out the ID 
                string tmp = dataStreamInfo.Substring(dataStreamInfo.IndexOf("(")+1);
                tmp = tmp.Substring(0,tmp.IndexOf(")"));
                string url = "http://monappdwp3.monica-cloud.eu:8088/gost_wdom/" + tmp + "?from=" + exportSettings.StartTime.ToString("o") +  "&to=" + exportSettings.EndTime.ToString("o");
                try
                {
                    WebClient wc = new WebClient();
                    wc.DownloadFile(url, filenameWithPath);
                }
                catch (WebException we)
                {
                    // add some kind of error processing
                    
                    BadRequest("Internal Server Error:" +we.ToString());
                }
                res.Path=  filename;
                return new ObjectResult(res);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

        }
    }
}
