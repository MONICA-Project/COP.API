/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using COP.API.Attributes;
using COP.API.Models;

namespace COP.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class PersonApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>delete person by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpDelete]
        [Route("/person/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PersonIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult PersonIdDelete([FromRoute][Required]string id, [FromHeader][Required()]string Authorization)
        {
            int newPersonId = -1;
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            string errorMessage = "";
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            try
            {
                DatabaseInterface.DBPerson dBPerson = new DatabaseInterface.DBPerson();
                Person foundPerson = null;
                if (!dBPerson.DeletePerson(int.Parse(id), ref errorMessage))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"description\" : \"Person id=" + id + " deleted\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralResponse>(exampleJson)
            : default(GeneralResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>get agents by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/person/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PersonIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Person), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult PersonIdGet([FromRoute][Required]string id, [FromHeader][Required()]string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            string errorMessage = "";
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            Person foundPerson = null;
            try
            {
                DatabaseInterface.DBPerson dBPerson = new DatabaseInterface.DBPerson();

                if (!dBPerson.FindPersonFromId(int.Parse(id), ref errorMessage, ref foundPerson))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }



            return new ObjectResult(foundPerson);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>update person</remarks>
        /// <param name="id"></param>
        /// <param name="updates"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPut]
        [Route("/person/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PersonIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult PersonIdPut([FromRoute][Required]string id, [FromBody]Person updates, [FromHeader][Required()]string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            string errorMessage = "";
            try
            {
                DatabaseInterface.DBPerson dBPerson = new DatabaseInterface.DBPerson();
                if (!dBPerson.UpdatePerson(int.Parse(id), updates.Role, updates.FullName, updates.Email, updates.Phone, 1, updates.Active, ref errorMessage))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));



            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"id\" : " + id + "\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralPostResponse>(exampleJson)
            : default(GeneralPostResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>add a new agent</remarks>
        /// <param name="fullName">Users full name</param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPost]
        [Route("/person")]
        [ValidateModelState]
        [SwaggerOperation("PersonPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralPostResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult PersonPost([FromBody]Person newPerson, [FromHeader][Required()]string Authorization)
        {
            int newPersonId = -1;
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            string errorMessage = "";
            try
            {
                DatabaseInterface.DBPerson dBPerson = new DatabaseInterface.DBPerson();
                if (!dBPerson.AddPerson(6, newPerson.Role, newPerson.FullName, newPerson.Email, newPerson.Phone, 1,newPerson.Active, ref errorMessage, ref newPersonId))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));



            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"newid\" : " + newPersonId.ToString() + "\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralPostResponse>(exampleJson)
            : default(GeneralPostResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get all agents</remarks>
        /// <param name="role"></param>
        /// <param name="status"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/persons")]
        [ValidateModelState]
        [SwaggerOperation("PersonsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetPersonListResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult PersonsGet([FromQuery]string role, [FromQuery]bool? status, [FromHeader][Required()]string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            string errorMessage = "";
            List<Person> foundPersons = null;
            try
            {
                DatabaseInterface.DBPerson dBPerson = new DatabaseInterface.DBPerson();
                if(role == null || role == "")
                { 
                    if (!dBPerson.AllPersons(ref errorMessage, ref foundPersons))
                        return BadRequest("Internal Server Error:" + errorMessage);
                }
                else
                { 
                     if (!dBPerson.AllPersonsWithRole(role, ref errorMessage, ref foundPersons))
                            return BadRequest("Internal Server Error:" + errorMessage);
                }
            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            // GetPersonsListResponse resp = new GetPersonsListResponse();
            //  resp.
            return new ObjectResult(foundPersons);
        }
    }
}
