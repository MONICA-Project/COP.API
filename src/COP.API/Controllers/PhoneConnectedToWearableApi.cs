/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using COP.API.Attributes;
using COP.API.Models;

namespace COP.API.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class PhoneConnectedToWearableApiController : Controller
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>add a new connectin between wearable nd phone</remarks>
        /// <param name="wearablePhysicalId">thing observation</param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPost]
        [Route("//phoneConnectedToWearable")]
        [ValidateModelState]
        [SwaggerOperation("PhoneConnectedToWearablePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult PhoneConnectedToWearablePost([FromBody]PhoneConnectedToWearable wearablePhysicalId, [FromHeader][Required()]string Authorization)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"description\" : \"description\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralResponse>(exampleJson)
            : default(GeneralResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>delete wearable by id</remarks>
        /// <param name="wearablePhysicalId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpDelete]
        [Route("//phoneConnectedToWearable/{wearablePhysicalId}")]
        [ValidateModelState]
        [SwaggerOperation("PhoneConnectedToWearableWearablePhysicalIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult PhoneConnectedToWearableWearablePhysicalIdDelete([FromRoute][Required]string wearablePhysicalId, [FromHeader][Required()]string Authorization)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true,\n  \"description\" : \"description\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralResponse>(exampleJson)
            : default(GeneralResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>get PhoneConnectedToWearable by id</remarks>
        /// <param name="wearablePhysicalId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("//phoneConnectedToWearable/{wearablePhysicalId}")]
        [ValidateModelState]
        [SwaggerOperation("PhoneConnectedToWearableWearablePhysicalIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonWithWearable), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult PhoneConnectedToWearableWearablePhysicalIdGet([FromRoute][Required]string wearablePhysicalId, [FromHeader][Required()]string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);  
            }
            if (Authorization != settings.testToken)
                return BadRequest("Not allowed");
            long newZoneID = 0;
            string errorMessage = "";
            PersonWithWearable result = null;
            try
            {
                DatabaseInterface.DBThingToPhoneid dBPhoneWithWearablesApi = new DatabaseInterface.DBThingToPhoneid();
                if (!dBPhoneWithWearablesApi.ListWearableByWearablesid(wearablePhysicalId, ref errorMessage, ref result))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }

            string exampleJson = null;

            return new ObjectResult(result);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>lista all phone with wearables connection</remarks>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("//phoneConnectedToWearables")]
        [ValidateModelState]
        [SwaggerOperation("PhoneConnectedToWearablesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GePCToWListResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult PhoneConnectedToWearablesGet([FromHeader][Required()]string Authorization)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GePCToWListResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "\"\"";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GePCToWListResponse>(exampleJson)
            : default(GePCToWListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
