/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using COP.API.Attributes;
using COP.API.Models;
using Microsoft.AspNetCore.SignalR;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace COP.API.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class ProAcousticFeedbackApiController : Controller
    {
        private readonly IHubContext<EventHubs.COPUpdate> _hubContext;

        public ProAcousticFeedbackApiController(IHubContext<EventHubs.COPUpdate> hubContext)
        {
            _hubContext = hubContext;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>results</remarks>
        /// <param name="feedbackType"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/proacousticfeedback")]
        [ValidateModelState]
        [SwaggerOperation("ProacousticfeedbackGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProAcousticFeedbacklistResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ProacousticfeedbackGet([FromQuery][Required]string feedbackType, [FromHeader] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            long newZoneID = 0;
            string errorMessage = "";
            List<ProAcousticFeedback> results = new List<ProAcousticFeedback>();
            try
            {
                DatabaseInterface.DBProfAcousticFeedback dBpaf = new DatabaseInterface.DBProfAcousticFeedback();
                if (!dBpaf.ListProAcousticFeedback(feedbackType, ref errorMessage, ref results))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }


            return new ObjectResult(results);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>add a new feedback</remarks>
        /// <param name="pubfeedback">small</param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPost]
        [Route("/proacousticfeedback")]
        [ValidateModelState]
        [SwaggerOperation("ProacousticfeedbackPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult ProacousticfeedbackPost([FromBody]ProAcousticFeedback pubfeedback, [FromHeader] string Authorization)
        {
            {
                if (!ModelState.IsValid)
                {
                    var error = ModelState.SelectMany(x => x.Value.Errors).First();
                    if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                    {
                        return BadRequest(error.ErrorMessage);
                    }
                    else if (error.Exception?.Message != null)
                    {
                        return BadRequest("Faulty input");
                    }
                    else
                        return BadRequest(ModelState);

                }
                long newThingID = 0;
                string errorMessage = "";
                try
                {
                    DatabaseInterface.DBProfAcousticFeedback dBpaf = new DatabaseInterface.DBProfAcousticFeedback();

                    if (!dBpaf.AddFeedback(pubfeedback.FeedbackType, pubfeedback.Phoneid, pubfeedback.FeedbackMessage, (double)pubfeedback.FeedbackValue, (double)pubfeedback.FeedbackLat, (double)pubfeedback.FeedbackLon, ref errorMessage, ref newThingID))
                        return BadRequest("Internal Server Error:" + errorMessage);
                    else
                    {
                        dynamic message = new JObject();
                        message.type = "new";
                        message.SoundIncidentsId = newThingID;
                        message.timestamp = DateTime.Now;
                        string strMessage = message.ToString();
                        _hubContext.Clients.All.SendAsync("SoundIncidents", strMessage);
                    }
                  

                }
                catch (Exception e)
                {
                    return BadRequest("Internal Server Error:" + e.Message);
                }


                //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
                // return StatusCode(200, default(GeneralResponse));

                //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
                // return StatusCode(0, default(ErrorResponse));


                string exampleJson = null;
                exampleJson = "{\n  \"success\" : true,\n  \"newid\" : " + newThingID.ToString() + "\n}";

                var example = exampleJson != null
                ? JsonConvert.DeserializeObject<GeneralPostResponse>(exampleJson)
                : default(GeneralPostResponse);
                //TODO: Change the data returned
                return new ObjectResult(example);
            }
        }
    }
}
