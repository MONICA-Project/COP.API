/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using COP.API.Attributes;
using COP.API.Models;

namespace COP.API.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class LoginApiController : Controller
    {
  

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update Event</remarks>
        /// <param name="status">Event information</param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPut]
        [Route("//login")]
        [ValidateModelState]
        [SwaggerOperation("LoginPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult LoginPost([FromBody]Login cred)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }

            //if (Authorization != settings.testToken)
            //    return BadRequest("Not allowed");
            string errorMessage = "";
            long foundEvent = 0;
            try
            {
                DatabaseInterface.DBLogin dBl = new DatabaseInterface.DBLogin();

                if (!dBl.ValidateUserCredentials(ref errorMessage, cred))
                    return BadRequest("Unauthorized:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }
            string status = "{\"token\":\"" + settings.testToken+  "\"}";
            return new ObjectResult(status);
        }
    }
}
