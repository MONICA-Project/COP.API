/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using COP.API.Attributes;
using COP.API.Models;


// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace COP.API.Controllers
{
    public class FriendFinderApiController : Controller
    {
        string authToken = "b038469b-9d67-47ef-b46a-40be8d5bb043";
        [HttpPost]
        [Route("/Public/FriendFinder/Register")]
        [ValidateModelState]
        [SwaggerOperation("Register")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult Register([FromBody] FriendFinderRegister reg, [FromHeader,Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != authToken)
                return BadRequest("Not allowed");
            long newThingID = 0;
            string errorMessage = "";

            try
            {
               DatabaseInterface.DBFriendFinder dBF = new DatabaseInterface.DBFriendFinder();

               if (!dBF.Register(reg.WristbandId, reg.NickName))
                   return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));


            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralPostResponse>(exampleJson)
            : default(GeneralPostResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }


        
        [HttpPost]
        [Route("/Public/FriendFinder")]
        [ValidateModelState]
        [SwaggerOperation("Add Friend")]
        [SwaggerResponse(statusCode: 200, type: typeof(GeneralResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult AddFriend([FromBody] FriendAdd reg, [FromHeader, Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != authToken)
                return BadRequest("Not allowed");
            long newThingID = 0;
            string errorMessage = "";

            try
            {
                DatabaseInterface.DBFriendFinder dBF = new DatabaseInterface.DBFriendFinder();

                if (!dBF.AddFriend(reg.WristbandId, reg.FriendWristbandId))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));


            string exampleJson = null;
            exampleJson = "{\n  \"success\" : true\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GeneralPostResponse>(exampleJson)
            : default(GeneralPostResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>list all friends</remarks>
        /// <param name="wristbandId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/Public/FriendFinder")]
        [ValidateModelState]
        [SwaggerOperation("GetFriends")]
        [SwaggerResponse(statusCode: 200, type: typeof(FriendFinderList), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult GetFriends([FromQuery][Required]string wristbandId, [FromHeader,Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != authToken)
                return BadRequest("Not allowed");
            long newThingID = 0;
            string errorMessage = "";
            FriendFinderList friends = new FriendFinderList();
            try
            {
                DatabaseInterface.DBFriendFinder dBF = new DatabaseInterface.DBFriendFinder();

                if (!dBF.FindFriend(wristbandId, ref friends))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));


        
            return new ObjectResult(friends);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>list all friends</remarks>
        /// <param name="wristbandId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/Public/FriendFinder/TranslateNick")]
        [ValidateModelState]
        [SwaggerOperation("TranslateNick")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Error")]
        public virtual IActionResult TranslateNick([FromQuery][Required]string wristbandId, [FromHeader, Required] string Authorization)
        {
            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }
            if (Authorization != authToken)
                return BadRequest("Not allowed");
            long newThingID = 0;
            string errorMessage = "";
            string friend = "";
            try
            {
                DatabaseInterface.DBFriendFinder dBF = new DatabaseInterface.DBFriendFinder();

                if (!dBF.TranslateNick(wristbandId,ref friend))
                    return BadRequest("Internal Server Error:" + errorMessage);

            }
            catch (Exception e)
            {
                return BadRequest("Internal Server Error:" + e.Message);
            }


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GeneralResponse));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));



            return new ObjectResult(friend);
        }
    }
}
